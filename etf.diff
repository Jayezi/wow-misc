diff --git a/engine/class_modules/sc_hunter.cpp b/engine/class_modules/sc_hunter.cpp
index 50eaa14d8b..6842dff6a5 100644
--- a/engine/class_modules/sc_hunter.cpp
+++ b/engine/class_modules/sc_hunter.cpp
@@ -383,6 +383,7 @@ public:
     buff_t* streamline;
     buff_t* trick_shots;
     buff_t* trueshot;
+    buff_t* etf_trueshot;
     buff_t* volley;
 
     // Survival
@@ -962,9 +963,14 @@ public:
     double total_regen = regen * cast_time.total_seconds();
     double total_energize = energize_cast_regen( s );
 
-    if ( p() -> buffs.trueshot -> check() )
+    if ( p() -> buffs.trueshot -> check() || p() -> buffs.etf_trueshot -> check() )
     {
-      const timespan_t remains = p() -> buffs.trueshot -> remains();
+
+      timespan_t remains;
+      if ( p()->buffs.trueshot->check() )
+        remains = p()->buffs.trueshot->remains();
+      else
+        remains = p()->buffs.etf_trueshot->remains();
 
       total_regen += regen * std::min( cast_time, remains ).total_seconds() *
                      p() -> specs.trueshot -> effectN( 6 ).percent();
@@ -3506,6 +3512,9 @@ struct aimed_shot_t : public aimed_shot_base_t
     if ( p() -> buffs.trueshot -> check() )
       et *= 1 + p() -> buffs.trueshot -> check_value();
 
+    if ( p()->buffs.etf_trueshot->check() )
+      et *= 1 + p()->buffs.etf_trueshot->check_value();
+
     return et;
   }
 
@@ -3516,7 +3525,7 @@ struct aimed_shot_t : public aimed_shot_base_t
     // XXX [8.1]: Spell Data indicates that it's reducing Aimed Shot recharge rate by 225% (12s/3.25 = 3.69s)
     // m /= 1 + .6;  // The information from the bluepost
     // m /= 1 + 2.25; // The bugged (in spelldata) value for Aimed Shot.
-    if ( p() -> buffs.trueshot -> check() )
+    if ( p() -> buffs.trueshot -> check() || p() -> buffs.etf_trueshot -> check() )
       m /= 1 + p() -> specs.trueshot -> effectN( 3 ).percent();
 
     // XXX: [9.0 Beta]: has the same effect as Trueshot above, implement as such
@@ -3633,7 +3642,7 @@ struct rapid_fire_t: public hunter_spell_t
        * generic focus gen increase from Trueshot as each energize gives 3 focus when
        * combined with Nesingwary's Trapping Apparatus buff.
        */
-      if ( p() -> buffs.trueshot -> check() && rng().roll( .5 ) )
+      if ( ( p()->buffs.trueshot->check() || p()->buffs.etf_trueshot->check() ) && rng().roll( .5 ) )
         p() -> resource_gain( RESOURCE_FOCUS, composite_energize_amount( execute_state ), p() -> gains.trueshot, this );
 
       // TODO
@@ -3771,7 +3780,7 @@ struct rapid_fire_t: public hunter_spell_t
     // XXX [8.1]: Spell Data indicates that it's reducing Rapid Fire by 240% (20s/3.4 = 5.88s)
     // m /= 1 + .6;  // The information from the bluepost
     // m /= 1 + 2.4; // The bugged (in spelldata) value for Rapid Fire.
-    if ( p() -> buffs.trueshot -> check() )
+    if ( p()->buffs.trueshot->check() || p()->buffs.etf_trueshot->check() )
       m /= 1 + p() -> specs.trueshot -> effectN( 1 ).percent();
 
     return m;
@@ -5033,11 +5042,15 @@ struct bloodshed_t : hunter_spell_t
 struct trueshot_t: public hunter_spell_t
 {
   timespan_t precast_time = 0_ms;
+  bool etf_precast = false;
+  double ssf_duration = 0;
 
   trueshot_t( hunter_t* p, util::string_view options_str ):
     hunter_spell_t( "trueshot", p, p -> specs.trueshot )
   {
     add_option( opt_timespan( "precast_time", precast_time ) );
+    add_option( opt_bool( "etf_precast", etf_precast ) );
+    add_option( opt_float( "ssf_duration", ssf_duration ) );
     parse_options( options_str );
 
     harmful = false;
@@ -5049,8 +5062,23 @@ struct trueshot_t: public hunter_spell_t
   {
     hunter_spell_t::execute();
 
-    trigger_buff( p() -> buffs.trueshot, precast_time );
-
+    if ( p()->legendary.eagletalons_true_focus->ok() || is_precombat && etf_precast )
+    {
+      trigger_buff( p()->buffs.etf_trueshot, precast_time );
+      if ( ssf_duration > 0 && !p()->conduits.sharpshooters_focus->ok() )
+      {
+        p()->buffs.etf_trueshot->extend_duration( p(), timespan_t::from_seconds( ssf_duration ) );
+      }
+    }
+    else
+    {
+      trigger_buff( p()->buffs.trueshot, precast_time );
+      if ( ssf_duration > 0 && !p()->conduits.sharpshooters_focus->ok() )
+      {
+        p()->buffs.trueshot->extend_duration( p(), timespan_t::from_seconds( ssf_duration ) );
+      }
+    }
+    
     adjust_precast_cooldown( precast_time );
   }
 };
@@ -5570,6 +5598,15 @@ std::unique_ptr<expr_t> hunter_t::create_expression( util::string_view expressio
     splits[ 1 ] = options.summon_pet_str;
     return player_t::create_expression( util::string_join( splits, "." ) );
   }
+  else if ( splits[ 0 ] == "buff" && splits[ 1 ] == "trueshot" )
+  {
+    if ( splits[ 2 ] == "up" )
+      return make_fn_expr( expression_str, [ this ] { return buffs.trueshot->check() || buffs.etf_trueshot->check(); } );
+    if ( splits[ 2 ] == "remains" )
+      return make_fn_expr( expression_str, [ this ] { return std::max( buffs.trueshot->remains(), buffs.etf_trueshot->remains() ); } );
+    if ( splits[ 2 ] == "down" )
+      return make_fn_expr( expression_str, [ this ] { return buffs.trueshot->check() <= 0 && buffs.etf_trueshot->check() <= 0; } );
+  }
 
   return player_t::create_expression( expression_str );
 }
@@ -6046,6 +6083,23 @@ void hunter_t::create_buffs()
     make_buff<buffs::trick_shots_t>( this, "trick_shots", find_spell( 257622 ) )
       -> set_chance( specs.trick_shots.ok() );
 
+  buffs.etf_trueshot =
+    make_buff( this, "etf_trueshot", specs.trueshot )
+      -> set_cooldown( 0_ms )
+      -> set_activated( true )
+      -> set_default_value_from_effect( 4 )
+      -> set_affects_regen( true )
+      -> set_stack_change_callback( [this]( buff_t*, int old, int cur ) {
+          cooldowns.aimed_shot -> adjust_recharge_multiplier();
+          cooldowns.rapid_fire -> adjust_recharge_multiplier();
+          if ( cur == 0 )
+              buffs.eagletalons_true_focus->expire();
+            else if ( old == 0 )
+              buffs.eagletalons_true_focus->trigger();
+        } )
+      -> apply_affecting_aura( find_spell( 336849 ) )
+      -> apply_affecting_conduit( conduits.sharpshooters_focus );
+
   buffs.trueshot =
     make_buff( this, "trueshot", specs.trueshot )
       -> set_cooldown( 0_ms )
@@ -6055,12 +6109,7 @@ void hunter_t::create_buffs()
       -> set_stack_change_callback( [this]( buff_t*, int old, int cur ) {
           cooldowns.aimed_shot -> adjust_recharge_multiplier();
           cooldowns.rapid_fire -> adjust_recharge_multiplier();
-          if ( cur == 0 )
-            buffs.eagletalons_true_focus -> expire();
-          else if ( old == 0 )
-            buffs.eagletalons_true_focus -> trigger();
         } )
-      -> apply_affecting_aura( legendary.eagletalons_true_focus )
       -> apply_affecting_conduit( conduits.sharpshooters_focus );
 
   buffs.volley =
@@ -6159,9 +6208,9 @@ void hunter_t::create_buffs()
       -> set_trigger_spell( legendary.butchers_bone_fragments );
 
   buffs.eagletalons_true_focus =
-    make_buff( this, "eagletalons_true_focus", legendary.eagletalons_true_focus -> effectN( 1 ).trigger() )
+    make_buff( this, "eagletalons_true_focus", find_spell( 336851 ) )
       -> set_default_value_from_effect( 1 )
-      -> set_trigger_spell( legendary.eagletalons_true_focus );
+      -> set_trigger_spell( find_spell( 336849 ) );
 
   buffs.flamewakers_cobra_sting =
     make_buff( this, "flamewakers_cobra_sting", legendary.flamewakers_cobra_sting -> effectN( 1 ).trigger() )
@@ -6515,7 +6564,7 @@ void hunter_t::regen( timespan_t periodicity )
     return;
 
   double total_regen = periodicity.total_seconds() * resource_regen_per_second( RESOURCE_FOCUS );
-  if ( buffs.trueshot -> check() )
+  if ( buffs.trueshot -> check() || buffs.etf_trueshot -> check() )
   {
     double regen = total_regen * specs.trueshot -> effectN( 6 ).percent();
     resource_gain( RESOURCE_FOCUS, regen, gains.trueshot );
@@ -6560,7 +6609,7 @@ double hunter_t::resource_gain( resource_e type, double amount, gain_t* g, actio
       mul_gains[ mul_gains_count++ ] = { mul, gain };
     };
 
-    if ( buffs.trueshot -> check() )
+    if ( buffs.trueshot -> check() || buffs.etf_trueshot -> check() )
       add_gain( specs.trueshot -> effectN( 5 ).percent(), gains.trueshot );
 
     if ( buffs.nesingwarys_apparatus -> check() )
